"""Tests for ResponseFormatter.
"""

import datetime
import pytz
import unittest
import uuid

from bookmarks.dao import TestDaoFactory
from response_formatter import ResponseFormatter


class ResponseFormatterTests(unittest.TestCase):
    def setUp(self):
        self._bookmark_dao_data = {
            'bookmark_id': uuid.uuid4(),
            'url': 'http://foo.com/a/b/c/',
            'summary': 'The bear went over the mountain',
            'sort_date': datetime.datetime(2017, 2, 22, 21, 11, tzinfo=pytz.utc),
            'description': 'foo bar baz',
            'display_date_format': '%Y.%m.%d',
            'status': 'squishy',
            'source': 'Raindrop',
            'source_item_id': '1357',
            'source_last_updated': datetime.datetime(2017, 1, 1, tzinfo=pytz.utc),
            'submitter_id': 'frodo',
            'submission_date': datetime.datetime.utcnow().replace(tzinfo=pytz.utc),
            }

    def test_format_bookmark__no_topics(self):
        """Verify dict generated by ResponseFormatter.format_bookmark."""
        serialized_attrs = ('bookmark_id', 'description', 'summary', 'status', 'url')
        expected_dict = {k: str(v) for (k,v) in self._bookmark_dao_data.items() 
                         if k in serialized_attrs}
        expected_dict['display_date'] = '2017.02.22'
        expected_dict['sort_date'] = self._bookmark_dao_data['sort_date'].isoformat()
        expected_dict['tld'] = 'foo.com'
        expected_dict['topics'] = []

        test_bookmark = TestDaoFactory.create_bookmark(**self._bookmark_dao_data)
        bookmark_dict = ResponseFormatter.format_bookmark(test_bookmark)
        self.assertEqual(expected_dict, bookmark_dict)


    def test_format_bookmark__topics(self):
        """Verify dict generated by ResponseFormatter.format_bookmark for bookmark with topics."""
        test_bookmark = TestDaoFactory.create_bookmark()
        def create_topic(topic):
            return TestDaoFactory.create_bookmark_topic(bookmark_id=test_bookmark.bookmark_id, 
                                                        topic=topic)
        test_bookmark.topics = [create_topic('Topic One'), create_topic('Topic Two')]

        bookmark_dict = ResponseFormatter.format_bookmark(test_bookmark)
        self.assertEqual(['Topic One', 'Topic Two'], bookmark_dict['topics'])
